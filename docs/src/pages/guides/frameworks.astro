---
import PageIntro from "../../components/PageIntro.astro";
import Layout from "../../layouts/Layout.astro";
import Note from "../../components/Note.astro";
import Heading from "../../components/Heading.astro";
import { Code } from "astro:components";
---

<Layout
  meta={{
    title: "Frameworks guide",
    description:
      "Find out how to integrate @biskin-style/calendar's components with frontend frameworks like React and Vue, and how to improve TypeScript support.",
  }}
>
  <h1 slot="intro">Integrating with frameworks</h1>
  <PageIntro slot="intro">How to use with React/Vue/Svelte</PageIntro>

  <p>
    It is not necessary to use a framework with @biskin-style/calendar. However, by virtue of
    being written as web components,
    <b>@biskin-style/calendar is framework-agnostic and can be used anywhere</b>.
  </p>

  <p>
    Most frameworks support web components out of the box, requiring
    little-to-no setup. Here we will walk through how to use <b>@biskin-style/calendar</b> in React,
    Vue, and Svelte. The process should be similar for other frameworks.
  </p>

  <Heading level={2}>React</Heading>

  <p>
    React <a href="https://custom-elements-everywhere.com/#react"
      >does not have great support</a
    > for web components. It is advised to create React-specific wrappers around
    web components so that they can be used easily and idiomatically.
  </p>

  <Note>
    <strong>Note:</strong> the next major version of React will offer
    <a
      href="https://github.com/facebook/react/issues/11347#issuecomment-1899140345"
      >full support for web components</a
    >, making these wrappers unnecessary. Though no release date has been set
    yet.
  </Note>

  <p>
    With a couple of custom hooks and some thin wrappers, we can make <b>@biskin-style/calendar's</b>
    components feel "native" to React.
  </p>

  <Code
    lang="jsx"
    code={`
import { useEffect, useRef, forwardRef, useImperativeHandle } from "react";
import "@biskin-style/calendar";

function useListener(ref, event, listener) {
  useEffect(() => {
    const current = ref.current;

    if (current && listener) {
      current.addEventListener(event, listener);
      return () => current.removeEventListener(event, listener);
    }
  }, [ref, event, listener]);
}

function useProperty(ref, prop, value) {
  useEffect(() => {
    if (ref.current) {
      ref.current[prop] = value;
    }
  }, [ref, prop, value]);
}

export const CalendarMonth = forwardRef(function CalendarMonth(props, forwardedRef) {
  return <calendar-month offset={props.offset} ref={forwardedRef} />;
});

export const CalendarRange = forwardRef(function CalendarRange(
  { onChange, showOutsideDays, firstDayOfWeek, isDateDisallowed, ...props },
  forwardedRef
) {
  const ref = useRef();
  useImperativeHandle(forwardedRef, () => ref.current, []);
  useListener(ref, "change", onChange);
  useProperty(ref, "isDateDisallowed", isDateDisallowed);

  return (
    <calendar-range
      ref={ref}
      show-outside-days={showOutsideDays || undefined}
      first-day-of-week={firstDayOfWeek}
      {...props}
    />
  );
});

export const CalendarDate = forwardRef(function CalendarDate(
  { onChange, showOutsideDays, firstDayOfWeek, isDateDisallowed, ...props },
  forwardedRef
) {
  const ref = useRef();
  useImperativeHandle(forwardedRef, () => ref.current, []);
  useListener(ref, "change", onChange);
  useProperty(ref, "isDateDisallowed", isDateDisallowed);

  return (
    <calendar-date
      ref={forwardRef}
      show-outside-days={showOutsideDays || undefined}
      first-day-of-week={firstDayOfWeek}
      {...props}
    />
  );
});
`.trim()}
  />

  <Heading id="react-usage" level={3}>Usage</Heading>

  <p>
    You can now use these components as you would any other React component.
  </p>

  <Code
    lang="jsx"
    code={`
import { useState } from "react";
import { createRoot } from 'react-dom/client';
import { CalendarRange, CalendarMonth } from "./calendar";

function Picker({ value, onChange }) {
  return (
    <CalendarRange value={value} onChange={onChange}>
      <CalendarMonth />
      <CalendarMonth offset={1} />
    </CalendarRange>
  );
}

function App() {
  const [value, setValue] = useState("");
  const onChange = (event) => setValue(event.target.value);

  return (
    <>
      <p>Value is: {value}</p>
      <Picker value={value} onChange={onChange} />
    </>
  )
}

const root = createRoot(document.getElementById("root"));
root.render(<App />)
`.trim()}
  />

  <Heading id="react-typescript" level={3}>TypeScript</Heading>

  <p>
    <b>@biskin-style/calendar</b> exports types for each component's props. We can use these types to
    add type-checking and improve the editor experience.
  </p>

  <Code
    lang="tsx"
    code={`
import {
  useEffect,
  useRef,
  ReactNode,
  forwardRef,
  useImperativeHandle,
  type RefObject,
  type PropsWithChildren,
} from "react";

import "@biskin-style/calendar";
import type {
  CalendarRangeProps,
  CalendarMonthProps,
  CalendarDateProps,
} from "@biskin-style/calendar";

declare global {
  namespace JSX {
    interface IntrinsicElements {
      "calendar-month": unknown;
      "calendar-range": unknown;
      "calendar-date": unknown;
    }
  }
}

function useListener(
  ref: RefObject<HTMLElement>,
  event: string,
  listener?: (e: Event) => void
) {
  useEffect(() => {
    const current = ref.current;

    if (current && listener) {
      current.addEventListener(event, listener);
      return () => current.removeEventListener(event, listener);
    }
  }, [ref, event, listener]);
}

function useProperty(ref: RefObject<HTMLElement>, prop: string, value?: any) {
  useEffect(() => {
    if (ref.current) {
      // @ts-expect-error - TS doesn't know that \`prop\` is a key
      ref.current[prop] = value;
    }
  }, [ref, prop, value]);
}

export const CalendarMonth = forwardRef(function CalendarMonth(
  props: CalendarMonthProps,
  forwardedRef
) {
  return <calendar-month offset={props.offset} ref={forwardedRef} />;
});

export const CalendarRange = forwardRef(function CalendarRange(
  {
    onChange,
    showOutsideDays,
    firstDayOfWeek,
    isDateDisallowed,
    ...props
  }: PropsWithChildren<CalendarRangeProps>,
  forwardedRef
) {
  const ref = useRef<HTMLElement>(null);
  useImperativeHandle(forwardedRef, () => ref.current, []);
  useListener(ref, "change", onChange);
  useProperty(ref, "isDateDisallowed", isDateDisallowed);

  return (
    <calendar-range
      ref={ref}
      show-outside-days={showOutsideDays || undefined}
      first-day-of-week={firstDayOfWeek}
      {...props}
    />
  );
});

export const CalendarDate = forwardRef(function CalendarDate(
  {
    onChange,
    showOutsideDays,
    firstDayOfWeek,
    isDateDisallowed,
    ...props
  }: PropsWithChildren<CalendarDateProps>,
  forwardedRef
) {
  const ref = useRef<HTMLElement>(null);
  useImperativeHandle(forwardedRef, () => ref.current, []);
  useListener(ref, "change", onChange);
  useProperty(ref, "isDateDisallowed", isDateDisallowed);

  return (
    <calendar-date
      ref={forwardRef}
      show-outside-days={showOutsideDays ? "" : undefined}
      first-day-of-week={firstDayOfWeek}
      {...props}
    />
  );
});
`.trim()}
  />

  <Heading level={2}>Vue</Heading>

  <p>
    Vue has <a href="https://custom-elements-everywhere.com/#vue"
      >excellent support for web components</a
    >. If you haven't already, you need to <a
      href="https://vuejs.org/guide/extras/web-components#skipping-component-resolution"
      >configure vue</a
    > to understand web components. After that, they can be used directly.
  </p>

  <Code
    lang="vue"
    code={`
<script setup>
import '@biskin-style/calendar';
</script>
<template>
  <calendar-range :months="2">
    <calendar-month />
    <calendar-month :offset="1" />
  </calendar-range>
</template>
`.trim()}
  />

  <Heading id="vue-usage" level={3}>Usage with <code>v-model</code></Heading>

  <p>
    The <code>{`<calendar-date>`}</code> and <code>{`<calendar-range>`}</code> components
    emit <code>change</code> events when their value changes. You can use the
    <code>v-model</code> directive to bind <code>ref</code>s to these events.
  </p>

  <p>
    As noted in the Vue docs, <code>v-model</code> listens for
    <code>input</code> events by default. But by using the
    <a href="https://vuejs.org/guide/essentials/forms#lazy"
      ><code>.lazy</code> modifier</a
    >, it will listen for <code>change</code> events.
  </p>

  <Code
    lang="vue"
    code={`
<script setup>
import '@biskin-style/calendar';
const selected = ref("")
</script>
<template>
  <p>Selected range: {{ selected }}</p>

  <calendar-range :months="2" v-model.lazy="selected">
    <calendar-month />
    <calendar-month :offset="1" />
  </calendar-range>
</template>
`.trim()}
  />

  <p>
    You are not required to use <code>v-model</code>. You can listen for events
    yourself if you prefer:
  </p>

  <Code
    lang="vue"
    code={`
<script setup>
import '@biskin-style/calendar';

const selected = ref("")
function onChange(event) {
  selected.value = event.target.value
}
</script>
<template>
  <p>Selected range: {{ selected }}</p>

  <calendar-range :months="2" :value="selected" @change="onChange">
    <calendar-month />
    <calendar-month :offset="1" />
  </calendar-range>
</template>
`.trim()}
  />

  <Heading id="vue-typescript" level={3}>TypeScript</Heading>

  <p>
    If you are using TypeScript, you can augment Vue's types to add
    type-checking and improve your editor experience. <b>@biskin-style/calendar</b> exports types for
    each component's props making this a simple, one-time procedure.
  </p>

  <p>
    First you should create a <code>d.ts</code> file in your Vue project, with any
    name you like. For this example let's call it <code>globals.d.ts</code>. In
    that file, paste the following code:
  </p>

  <Code
    lang="typescript"
    code={`
import type { DefineComponent } from "vue";
import type {
  CalendarRangeProps,
  CalendarMonthProps,
  CalendarDateProps,
} from "@biskin-style/calendar";

interface CalendarComponents {
  "calendar-range": DefineComponent<CalendarRangeProps>;
  "calendar-date": DefineComponent<CalendarDateProps>;
  "calendar-month": DefineComponent<CalendarMonthProps>;
}

declare module "vue" {
  interface GlobalComponents extends CalendarComponents {}
}

declare global {
  namespace JSX {
    interface IntrinsicElements extends CalendarComponents {}
  }
}
`.trim()}
  />

  <Note>
    This uses TypeScript's declaration merging feature. You can read more about
    it in the <a
      href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html"
      >TypeScript Handbook</a
    >.
  </Note>

  <p>
    Finally, you must add this to the <code>compilerOptions.types</code> field in
    your
    <code>tsconfig.json</code>:
  </p>

  <Code
    lang="json"
    code={`
{
  // ...
  "compilerOptions": {
    // ...
    "types": ["./globals.d.ts"]
  }
}
`.trim()}
  />

  <p>
    Now you will get type-checking for both props and events, along with
    auto-complete in your editor.
  </p>

  <Heading level={2}>Svelte</Heading>

  <p>
    Svelte has <a href="https://custom-elements-everywhere.com/#svelte"
      >good support for web components</a
    >. There is no setup required to start using Web Components.
  </p>

  <Code
    lang="svelte"
    code={`
<script lang="ts">
  import "@biskin-style/calendar";
</script>

<calendar-range months={2}>
  <calendar-month></calendar-month>
  <calendar-month offset={1}></calendar-month>
</calendar-range>
`.trim()}
  />

  <Heading id="svelte-typescript" level={3}>TypeScript</Heading>

  <p>
    If you are using TypeScript, you can augment Svelte's types to add
    type-checking and improve your editor experience. <b>@biskin-style/calendar</b> exports types for
    each component's props making this a simple, one-time procedure.
  </p>

  <p>
    First you should create a <code>d.ts</code> file in your Svelte project, with
    any name you like. For this example let's call it <code>globals.d.ts</code>.
    In that file, paste the following code:
  </p>

  <Code
    lang="typescript"
    code={`
import type {
  CalendarRangeProps,
  CalendarMonthProps,
  CalendarDateProps,
} from "@biskin-style/calendar";

type MapEvents<T> = {
  [K in keyof T as K extends \`on\${infer E}\` ? \`on:\${Lowercase<E>}\` : K]: T[K];
};

declare module "svelte/elements" {
  interface SvelteHTMLElements {
    "calendar-range": MapEvents<CalendarRangeProps>;
    "calendar-month": MapEvents<CalendarMonthProps>;
    "calendar-date": MapEvents<CalendarDateProps>;
  }
}
`.trim()}
  />

  <Note>
    This uses TypeScript's declaration merging feature. You can read more about
    it in the <a
      href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html"
      >TypeScript Handbook</a
    >.
  </Note>

  <p>
    Finally, you must add this to the <code>compilerOptions.types</code> field in
    your
    <code>tsconfig.json</code>:
  </p>

  <Code
    lang="json"
    code={`
{
  // ...
  "compilerOptions": {
    // ...
    "types": ["./globals.d.ts"]
  }
}
`.trim()}
  />

  <p>
    Now you will get type-checking for both props and events, along with
    auto-complete in your editor.
  </p>
</Layout>
